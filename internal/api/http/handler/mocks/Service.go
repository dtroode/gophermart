// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/dtroode/gophermart/internal/application/model"

	request "github.com/dtroode/gophermart/internal/application/request"

	response "github.com/dtroode/gophermart/internal/application/response"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// GetUserBalance provides a mock function with given fields: ctx, id
func (_m *Service) GetUserBalance(ctx context.Context, id uuid.UUID) (*response.UserBalance, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBalance")
	}

	var r0 *response.UserBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*response.UserBalance, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *response.UserBalance); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.UserBalance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserBalance'
type Service_GetUserBalance_Call struct {
	*mock.Call
}

// GetUserBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Service_Expecter) GetUserBalance(ctx interface{}, id interface{}) *Service_GetUserBalance_Call {
	return &Service_GetUserBalance_Call{Call: _e.mock.On("GetUserBalance", ctx, id)}
}

func (_c *Service_GetUserBalance_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Service_GetUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_GetUserBalance_Call) Return(_a0 *response.UserBalance, _a1 error) *Service_GetUserBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetUserBalance_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*response.UserBalance, error)) *Service_GetUserBalance_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserOrders provides a mock function with given fields: ctx, id
func (_m *Service) ListUserOrders(ctx context.Context, id uuid.UUID) ([]*response.UserOrder, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ListUserOrders")
	}

	var r0 []*response.UserOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*response.UserOrder, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*response.UserOrder); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.UserOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_ListUserOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserOrders'
type Service_ListUserOrders_Call struct {
	*mock.Call
}

// ListUserOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Service_Expecter) ListUserOrders(ctx interface{}, id interface{}) *Service_ListUserOrders_Call {
	return &Service_ListUserOrders_Call{Call: _e.mock.On("ListUserOrders", ctx, id)}
}

func (_c *Service_ListUserOrders_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Service_ListUserOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_ListUserOrders_Call) Return(_a0 []*response.UserOrder, _a1 error) *Service_ListUserOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_ListUserOrders_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*response.UserOrder, error)) *Service_ListUserOrders_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserWithdrawals provides a mock function with given fields: ctx, id
func (_m *Service) ListUserWithdrawals(ctx context.Context, id uuid.UUID) ([]*response.UserWithdrawal, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ListUserWithdrawals")
	}

	var r0 []*response.UserWithdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*response.UserWithdrawal, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*response.UserWithdrawal); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.UserWithdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_ListUserWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserWithdrawals'
type Service_ListUserWithdrawals_Call struct {
	*mock.Call
}

// ListUserWithdrawals is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Service_Expecter) ListUserWithdrawals(ctx interface{}, id interface{}) *Service_ListUserWithdrawals_Call {
	return &Service_ListUserWithdrawals_Call{Call: _e.mock.On("ListUserWithdrawals", ctx, id)}
}

func (_c *Service_ListUserWithdrawals_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Service_ListUserWithdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_ListUserWithdrawals_Call) Return(_a0 []*response.UserWithdrawal, _a1 error) *Service_ListUserWithdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_ListUserWithdrawals_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*response.UserWithdrawal, error)) *Service_ListUserWithdrawals_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, dto
func (_m *Service) Login(ctx context.Context, dto *request.Login) (string, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.Login) (string, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.Login) string); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.Login) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Service_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - dto *request.Login
func (_e *Service_Expecter) Login(ctx interface{}, dto interface{}) *Service_Login_Call {
	return &Service_Login_Call{Call: _e.mock.On("Login", ctx, dto)}
}

func (_c *Service_Login_Call) Run(run func(ctx context.Context, dto *request.Login)) *Service_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*request.Login))
	})
	return _c
}

func (_c *Service_Login_Call) Return(_a0 string, _a1 error) *Service_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Login_Call) RunAndReturn(run func(context.Context, *request.Login) (string, error)) *Service_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, dto
func (_m *Service) RegisterUser(ctx context.Context, dto *request.RegisterUser) (string, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.RegisterUser) (string, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.RegisterUser) string); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.RegisterUser) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type Service_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - dto *request.RegisterUser
func (_e *Service_Expecter) RegisterUser(ctx interface{}, dto interface{}) *Service_RegisterUser_Call {
	return &Service_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, dto)}
}

func (_c *Service_RegisterUser_Call) Run(run func(ctx context.Context, dto *request.RegisterUser)) *Service_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*request.RegisterUser))
	})
	return _c
}

func (_c *Service_RegisterUser_Call) Return(_a0 string, _a1 error) *Service_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_RegisterUser_Call) RunAndReturn(run func(context.Context, *request.RegisterUser) (string, error)) *Service_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// UploadOrder provides a mock function with given fields: ctx, dto
func (_m *Service) UploadOrder(ctx context.Context, dto *request.UploadOrder) (*model.Order, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for UploadOrder")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.UploadOrder) (*model.Order, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.UploadOrder) *model.Order); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.UploadOrder) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_UploadOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadOrder'
type Service_UploadOrder_Call struct {
	*mock.Call
}

// UploadOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - dto *request.UploadOrder
func (_e *Service_Expecter) UploadOrder(ctx interface{}, dto interface{}) *Service_UploadOrder_Call {
	return &Service_UploadOrder_Call{Call: _e.mock.On("UploadOrder", ctx, dto)}
}

func (_c *Service_UploadOrder_Call) Run(run func(ctx context.Context, dto *request.UploadOrder)) *Service_UploadOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*request.UploadOrder))
	})
	return _c
}

func (_c *Service_UploadOrder_Call) Return(_a0 *model.Order, _a1 error) *Service_UploadOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_UploadOrder_Call) RunAndReturn(run func(context.Context, *request.UploadOrder) (*model.Order, error)) *Service_UploadOrder_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawUserBonuses provides a mock function with given fields: ctx, dto
func (_m *Service) WithdrawUserBonuses(ctx context.Context, dto *request.WithdrawBonuses) error {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawUserBonuses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.WithdrawBonuses) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_WithdrawUserBonuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawUserBonuses'
type Service_WithdrawUserBonuses_Call struct {
	*mock.Call
}

// WithdrawUserBonuses is a helper method to define mock.On call
//   - ctx context.Context
//   - dto *request.WithdrawBonuses
func (_e *Service_Expecter) WithdrawUserBonuses(ctx interface{}, dto interface{}) *Service_WithdrawUserBonuses_Call {
	return &Service_WithdrawUserBonuses_Call{Call: _e.mock.On("WithdrawUserBonuses", ctx, dto)}
}

func (_c *Service_WithdrawUserBonuses_Call) Run(run func(ctx context.Context, dto *request.WithdrawBonuses)) *Service_WithdrawUserBonuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*request.WithdrawBonuses))
	})
	return _c
}

func (_c *Service_WithdrawUserBonuses_Call) Return(_a0 error) *Service_WithdrawUserBonuses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_WithdrawUserBonuses_Call) RunAndReturn(run func(context.Context, *request.WithdrawBonuses) error) *Service_WithdrawUserBonuses_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
