// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWithdrawal = `-- name: CreateWithdrawal :one
INSERT INTO withdrawals (user_id, order_num, amount)
VALUES ($1, $2, $3)
RETURNING id, user_id, order_num, created_at, amount
`

type CreateWithdrawalParams struct {
	UserID   pgtype.UUID
	OrderNum string
	Amount   float32
}

func (q *Queries) CreateWithdrawal(ctx context.Context, arg CreateWithdrawalParams) (*Withdrawal, error) {
	row := q.db.QueryRow(ctx, createWithdrawal, arg.UserID, arg.OrderNum, arg.Amount)
	var i Withdrawal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderNum,
		&i.CreatedAt,
		&i.Amount,
	)
	return &i, err
}

const getOrderByNumber = `-- name: GetOrderByNumber :one
SELECT id, user_id, created_at, num, accrual, status FROM orders
WHERE num = $1 LIMIT 1
`

func (q *Queries) GetOrderByNumber(ctx context.Context, num string) (*Order, error) {
	row := q.db.QueryRow(ctx, getOrderByNumber, num)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Num,
		&i.Accrual,
		&i.Status,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT id, login, password, created_at, balance FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
		&i.Balance,
	)
	return &i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, login, password, created_at, balance FROM users
WHERE login = $1 LIMIT 1
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
		&i.Balance,
	)
	return &i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, login, password, created_at, balance FROM users
WHERE id = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id pgtype.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getUserForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
		&i.Balance,
	)
	return &i, err
}

const getUserOrdersNewestFirst = `-- name: GetUserOrdersNewestFirst :many
SELECT id, user_id, created_at, num, accrual, status FROM orders
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetUserOrdersNewestFirst(ctx context.Context, userID pgtype.UUID) ([]*Order, error) {
	rows, err := q.db.Query(ctx, getUserOrdersNewestFirst, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Num,
			&i.Accrual,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWithdrawalSum = `-- name: GetUserWithdrawalSum :one
SELECT COALESCE(SUM(amount), 0)::real FROM withdrawals
WHERE user_id = $1
`

func (q *Queries) GetUserWithdrawalSum(ctx context.Context, userID pgtype.UUID) (float32, error) {
	row := q.db.QueryRow(ctx, getUserWithdrawalSum, userID)
	var column_1 float32
	err := row.Scan(&column_1)
	return column_1, err
}

const getUserWithdrawals = `-- name: GetUserWithdrawals :many
SELECT id, user_id, order_num, created_at, amount FROM withdrawals
WHERE user_id = $1
`

func (q *Queries) GetUserWithdrawals(ctx context.Context, userID pgtype.UUID) ([]*Withdrawal, error) {
	rows, err := q.db.Query(ctx, getUserWithdrawals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Withdrawal
	for rows.Next() {
		var i Withdrawal
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderNum,
			&i.CreatedAt,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementUserBalance = `-- name: IncrementUserBalance :one
UPDATE users
SET balance = balance + $1
WHERE id = $2
RETURNING id, login, created_at, balance
`

type IncrementUserBalanceParams struct {
	Balance pgtype.Float4
	ID      pgtype.UUID
}

type IncrementUserBalanceRow struct {
	ID        pgtype.UUID
	Login     string
	CreatedAt pgtype.Timestamptz
	Balance   pgtype.Float4
}

func (q *Queries) IncrementUserBalance(ctx context.Context, arg IncrementUserBalanceParams) (*IncrementUserBalanceRow, error) {
	row := q.db.QueryRow(ctx, incrementUserBalance, arg.Balance, arg.ID)
	var i IncrementUserBalanceRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.CreatedAt,
		&i.Balance,
	)
	return &i, err
}

const saveOrder = `-- name: SaveOrder :one
INSERT INTO orders (user_id, num, accrual, status)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, created_at, num, accrual, status
`

type SaveOrderParams struct {
	UserID  pgtype.UUID
	Num     string
	Accrual pgtype.Float4
	Status  OrderStatus
}

func (q *Queries) SaveOrder(ctx context.Context, arg SaveOrderParams) (*Order, error) {
	row := q.db.QueryRow(ctx, saveOrder,
		arg.UserID,
		arg.Num,
		arg.Accrual,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Num,
		&i.Accrual,
		&i.Status,
	)
	return &i, err
}

const saveUser = `-- name: SaveUser :one
INSERT INTO users (login, password)
VALUES ($1, $2)
RETURNING id, login, password, created_at, balance
`

type SaveUserParams struct {
	Login    string
	Password string
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, saveUser, arg.Login, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
		&i.Balance,
	)
	return &i, err
}

const setOrderAccrual = `-- name: SetOrderAccrual :one
UPDATE orders
SET accrual = $1
WHERE id = $2
RETURNING id, user_id, created_at, num, accrual, status
`

type SetOrderAccrualParams struct {
	Accrual pgtype.Float4
	ID      pgtype.UUID
}

func (q *Queries) SetOrderAccrual(ctx context.Context, arg SetOrderAccrualParams) (*Order, error) {
	row := q.db.QueryRow(ctx, setOrderAccrual, arg.Accrual, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Num,
		&i.Accrual,
		&i.Status,
	)
	return &i, err
}

const setOrderStatus = `-- name: SetOrderStatus :one
UPDATE orders
SET status = $1
WHERE id = $2
RETURNING id, user_id, created_at, num, accrual, status
`

type SetOrderStatusParams struct {
	Status OrderStatus
	ID     pgtype.UUID
}

func (q *Queries) SetOrderStatus(ctx context.Context, arg SetOrderStatusParams) (*Order, error) {
	row := q.db.QueryRow(ctx, setOrderStatus, arg.Status, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Num,
		&i.Accrual,
		&i.Status,
	)
	return &i, err
}

const setUserBalance = `-- name: SetUserBalance :one
UPDATE users
SET balance = $1
WHERE id = $2
RETURNING id, login, created_at, balance
`

type SetUserBalanceParams struct {
	Balance pgtype.Float4
	ID      pgtype.UUID
}

type SetUserBalanceRow struct {
	ID        pgtype.UUID
	Login     string
	CreatedAt pgtype.Timestamptz
	Balance   pgtype.Float4
}

func (q *Queries) SetUserBalance(ctx context.Context, arg SetUserBalanceParams) (*SetUserBalanceRow, error) {
	row := q.db.QueryRow(ctx, setUserBalance, arg.Balance, arg.ID)
	var i SetUserBalanceRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.CreatedAt,
		&i.Balance,
	)
	return &i, err
}
