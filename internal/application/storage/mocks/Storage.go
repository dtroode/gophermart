// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dtroode/gophermart/internal/application/model"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/dtroode/gophermart/internal/application/storage"

	uuid "github.com/google/uuid"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// GetOrderByNumber provides a mock function with given fields: ctx, number
func (_m *Storage) GetOrderByNumber(ctx context.Context, number string) (*model.Order, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByNumber")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Order, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Order); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetOrderByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByNumber'
type Storage_GetOrderByNumber_Call struct {
	*mock.Call
}

// GetOrderByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number string
func (_e *Storage_Expecter) GetOrderByNumber(ctx interface{}, number interface{}) *Storage_GetOrderByNumber_Call {
	return &Storage_GetOrderByNumber_Call{Call: _e.mock.On("GetOrderByNumber", ctx, number)}
}

func (_c *Storage_GetOrderByNumber_Call) Run(run func(ctx context.Context, number string)) *Storage_GetOrderByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_GetOrderByNumber_Call) Return(_a0 *model.Order, _a1 error) *Storage_GetOrderByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetOrderByNumber_Call) RunAndReturn(run func(context.Context, string) (*model.Order, error)) *Storage_GetOrderByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *Storage) GetUser(ctx context.Context, id uuid.UUID) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type Storage_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Storage_Expecter) GetUser(ctx interface{}, id interface{}) *Storage_GetUser_Call {
	return &Storage_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *Storage_GetUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Storage_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Storage_GetUser_Call) Return(_a0 *model.User, _a1 error) *Storage_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.User, error)) *Storage_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *Storage) GetUserByLogin(ctx context.Context, login string) (*model.User, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetUserByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLogin'
type Storage_GetUserByLogin_Call struct {
	*mock.Call
}

// GetUserByLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *Storage_Expecter) GetUserByLogin(ctx interface{}, login interface{}) *Storage_GetUserByLogin_Call {
	return &Storage_GetUserByLogin_Call{Call: _e.mock.On("GetUserByLogin", ctx, login)}
}

func (_c *Storage_GetUserByLogin_Call) Run(run func(ctx context.Context, login string)) *Storage_GetUserByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_GetUserByLogin_Call) Return(_a0 *model.User, _a1 error) *Storage_GetUserByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetUserByLogin_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *Storage_GetUserByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserOrdersNewestFirst provides a mock function with given fields: ctx, userID
func (_m *Storage) GetUserOrdersNewestFirst(ctx context.Context, userID uuid.UUID) ([]*model.Order, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrdersNewestFirst")
	}

	var r0 []*model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetUserOrdersNewestFirst_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserOrdersNewestFirst'
type Storage_GetUserOrdersNewestFirst_Call struct {
	*mock.Call
}

// GetUserOrdersNewestFirst is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *Storage_Expecter) GetUserOrdersNewestFirst(ctx interface{}, userID interface{}) *Storage_GetUserOrdersNewestFirst_Call {
	return &Storage_GetUserOrdersNewestFirst_Call{Call: _e.mock.On("GetUserOrdersNewestFirst", ctx, userID)}
}

func (_c *Storage_GetUserOrdersNewestFirst_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *Storage_GetUserOrdersNewestFirst_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Storage_GetUserOrdersNewestFirst_Call) Return(_a0 []*model.Order, _a1 error) *Storage_GetUserOrdersNewestFirst_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetUserOrdersNewestFirst_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*model.Order, error)) *Storage_GetUserOrdersNewestFirst_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWithdrawalSum provides a mock function with given fields: ctx, userID
func (_m *Storage) GetUserWithdrawalSum(ctx context.Context, userID uuid.UUID) (float32, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithdrawalSum")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (float32, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) float32); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetUserWithdrawalSum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithdrawalSum'
type Storage_GetUserWithdrawalSum_Call struct {
	*mock.Call
}

// GetUserWithdrawalSum is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *Storage_Expecter) GetUserWithdrawalSum(ctx interface{}, userID interface{}) *Storage_GetUserWithdrawalSum_Call {
	return &Storage_GetUserWithdrawalSum_Call{Call: _e.mock.On("GetUserWithdrawalSum", ctx, userID)}
}

func (_c *Storage_GetUserWithdrawalSum_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *Storage_GetUserWithdrawalSum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Storage_GetUserWithdrawalSum_Call) Return(_a0 float32, _a1 error) *Storage_GetUserWithdrawalSum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetUserWithdrawalSum_Call) RunAndReturn(run func(context.Context, uuid.UUID) (float32, error)) *Storage_GetUserWithdrawalSum_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWithdrawals provides a mock function with given fields: ctx, userID
func (_m *Storage) GetUserWithdrawals(ctx context.Context, userID uuid.UUID) ([]*model.WithdrawalOrder, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithdrawals")
	}

	var r0 []*model.WithdrawalOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.WithdrawalOrder, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.WithdrawalOrder); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.WithdrawalOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetUserWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithdrawals'
type Storage_GetUserWithdrawals_Call struct {
	*mock.Call
}

// GetUserWithdrawals is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *Storage_Expecter) GetUserWithdrawals(ctx interface{}, userID interface{}) *Storage_GetUserWithdrawals_Call {
	return &Storage_GetUserWithdrawals_Call{Call: _e.mock.On("GetUserWithdrawals", ctx, userID)}
}

func (_c *Storage_GetUserWithdrawals_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *Storage_GetUserWithdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Storage_GetUserWithdrawals_Call) Return(_a0 []*model.WithdrawalOrder, _a1 error) *Storage_GetUserWithdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetUserWithdrawals_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*model.WithdrawalOrder, error)) *Storage_GetUserWithdrawals_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementUserBalance provides a mock function with given fields: ctx, dto
func (_m *Storage) IncrementUserBalance(ctx context.Context, dto *storage.IncrementUserBalance) (*model.User, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for IncrementUserBalance")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.IncrementUserBalance) (*model.User, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.IncrementUserBalance) *model.User); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storage.IncrementUserBalance) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_IncrementUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementUserBalance'
type Storage_IncrementUserBalance_Call struct {
	*mock.Call
}

// IncrementUserBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - dto *storage.IncrementUserBalance
func (_e *Storage_Expecter) IncrementUserBalance(ctx interface{}, dto interface{}) *Storage_IncrementUserBalance_Call {
	return &Storage_IncrementUserBalance_Call{Call: _e.mock.On("IncrementUserBalance", ctx, dto)}
}

func (_c *Storage_IncrementUserBalance_Call) Run(run func(ctx context.Context, dto *storage.IncrementUserBalance)) *Storage_IncrementUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*storage.IncrementUserBalance))
	})
	return _c
}

func (_c *Storage_IncrementUserBalance_Call) Return(_a0 *model.User, _a1 error) *Storage_IncrementUserBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_IncrementUserBalance_Call) RunAndReturn(run func(context.Context, *storage.IncrementUserBalance) (*model.User, error)) *Storage_IncrementUserBalance_Call {
	_c.Call.Return(run)
	return _c
}

// SaveOrder provides a mock function with given fields: ctx, order
func (_m *Storage) SaveOrder(ctx context.Context, order *model.Order) (*model.Order, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrder")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) (*model.Order, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) *model.Order); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_SaveOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOrder'
type Storage_SaveOrder_Call struct {
	*mock.Call
}

// SaveOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order *model.Order
func (_e *Storage_Expecter) SaveOrder(ctx interface{}, order interface{}) *Storage_SaveOrder_Call {
	return &Storage_SaveOrder_Call{Call: _e.mock.On("SaveOrder", ctx, order)}
}

func (_c *Storage_SaveOrder_Call) Run(run func(ctx context.Context, order *model.Order)) *Storage_SaveOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Order))
	})
	return _c
}

func (_c *Storage_SaveOrder_Call) Return(_a0 *model.Order, _a1 error) *Storage_SaveOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_SaveOrder_Call) RunAndReturn(run func(context.Context, *model.Order) (*model.Order, error)) *Storage_SaveOrder_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function with given fields: ctx, user
func (_m *Storage) SaveUser(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type Storage_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *Storage_Expecter) SaveUser(ctx interface{}, user interface{}) *Storage_SaveUser_Call {
	return &Storage_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, user)}
}

func (_c *Storage_SaveUser_Call) Run(run func(ctx context.Context, user *model.User)) *Storage_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *Storage_SaveUser_Call) Return(_a0 *model.User, _a1 error) *Storage_SaveUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_SaveUser_Call) RunAndReturn(run func(context.Context, *model.User) (*model.User, error)) *Storage_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetOrderStatus provides a mock function with given fields: ctx, dto
func (_m *Storage) SetOrderStatus(ctx context.Context, dto *storage.SetOrderStatus) (*model.Order, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for SetOrderStatus")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.SetOrderStatus) (*model.Order, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.SetOrderStatus) *model.Order); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storage.SetOrderStatus) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_SetOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOrderStatus'
type Storage_SetOrderStatus_Call struct {
	*mock.Call
}

// SetOrderStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - dto *storage.SetOrderStatus
func (_e *Storage_Expecter) SetOrderStatus(ctx interface{}, dto interface{}) *Storage_SetOrderStatus_Call {
	return &Storage_SetOrderStatus_Call{Call: _e.mock.On("SetOrderStatus", ctx, dto)}
}

func (_c *Storage_SetOrderStatus_Call) Run(run func(ctx context.Context, dto *storage.SetOrderStatus)) *Storage_SetOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*storage.SetOrderStatus))
	})
	return _c
}

func (_c *Storage_SetOrderStatus_Call) Return(_a0 *model.Order, _a1 error) *Storage_SetOrderStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_SetOrderStatus_Call) RunAndReturn(run func(context.Context, *storage.SetOrderStatus) (*model.Order, error)) *Storage_SetOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SetOrderStatusAndAccrual provides a mock function with given fields: ctx, dto
func (_m *Storage) SetOrderStatusAndAccrual(ctx context.Context, dto *storage.SetOrderStatusAndAccrual) (*model.Order, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for SetOrderStatusAndAccrual")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.SetOrderStatusAndAccrual) (*model.Order, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.SetOrderStatusAndAccrual) *model.Order); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storage.SetOrderStatusAndAccrual) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_SetOrderStatusAndAccrual_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOrderStatusAndAccrual'
type Storage_SetOrderStatusAndAccrual_Call struct {
	*mock.Call
}

// SetOrderStatusAndAccrual is a helper method to define mock.On call
//   - ctx context.Context
//   - dto *storage.SetOrderStatusAndAccrual
func (_e *Storage_Expecter) SetOrderStatusAndAccrual(ctx interface{}, dto interface{}) *Storage_SetOrderStatusAndAccrual_Call {
	return &Storage_SetOrderStatusAndAccrual_Call{Call: _e.mock.On("SetOrderStatusAndAccrual", ctx, dto)}
}

func (_c *Storage_SetOrderStatusAndAccrual_Call) Run(run func(ctx context.Context, dto *storage.SetOrderStatusAndAccrual)) *Storage_SetOrderStatusAndAccrual_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*storage.SetOrderStatusAndAccrual))
	})
	return _c
}

func (_c *Storage_SetOrderStatusAndAccrual_Call) Return(_a0 *model.Order, _a1 error) *Storage_SetOrderStatusAndAccrual_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_SetOrderStatusAndAccrual_Call) RunAndReturn(run func(context.Context, *storage.SetOrderStatusAndAccrual) (*model.Order, error)) *Storage_SetOrderStatusAndAccrual_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawUserBonuses provides a mock function with given fields: ctx, dto
func (_m *Storage) WithdrawUserBonuses(ctx context.Context, dto *storage.WithdrawUserBonuses) (*model.User, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawUserBonuses")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.WithdrawUserBonuses) (*model.User, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.WithdrawUserBonuses) *model.User); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storage.WithdrawUserBonuses) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_WithdrawUserBonuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawUserBonuses'
type Storage_WithdrawUserBonuses_Call struct {
	*mock.Call
}

// WithdrawUserBonuses is a helper method to define mock.On call
//   - ctx context.Context
//   - dto *storage.WithdrawUserBonuses
func (_e *Storage_Expecter) WithdrawUserBonuses(ctx interface{}, dto interface{}) *Storage_WithdrawUserBonuses_Call {
	return &Storage_WithdrawUserBonuses_Call{Call: _e.mock.On("WithdrawUserBonuses", ctx, dto)}
}

func (_c *Storage_WithdrawUserBonuses_Call) Run(run func(ctx context.Context, dto *storage.WithdrawUserBonuses)) *Storage_WithdrawUserBonuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*storage.WithdrawUserBonuses))
	})
	return _c
}

func (_c *Storage_WithdrawUserBonuses_Call) Return(_a0 *model.User, _a1 error) *Storage_WithdrawUserBonuses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_WithdrawUserBonuses_Call) RunAndReturn(run func(context.Context, *storage.WithdrawUserBonuses) (*model.User, error)) *Storage_WithdrawUserBonuses_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
