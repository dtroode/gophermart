// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	workerpool "github.com/dtroode/gophermart/internal/workerpool"
)

// WorkerPool is an autogenerated mock type for the WorkerPool type
type WorkerPool struct {
	mock.Mock
}

type WorkerPool_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkerPool) EXPECT() *WorkerPool_Expecter {
	return &WorkerPool_Expecter{mock: &_m.Mock}
}

// Submit provides a mock function with given fields: ctx, timeout, fn, expectResult
func (_m *WorkerPool) Submit(ctx context.Context, timeout time.Duration, fn func(context.Context) (any, error), expectResult bool) chan *workerpool.Result {
	ret := _m.Called(ctx, timeout, fn, expectResult)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 chan *workerpool.Result
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, func(context.Context) (any, error), bool) chan *workerpool.Result); ok {
		r0 = rf(ctx, timeout, fn, expectResult)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *workerpool.Result)
		}
	}

	return r0
}

// WorkerPool_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type WorkerPool_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - fn func(context.Context)(any , error)
//   - expectResult bool
func (_e *WorkerPool_Expecter) Submit(ctx interface{}, timeout interface{}, fn interface{}, expectResult interface{}) *WorkerPool_Submit_Call {
	return &WorkerPool_Submit_Call{Call: _e.mock.On("Submit", ctx, timeout, fn, expectResult)}
}

func (_c *WorkerPool_Submit_Call) Run(run func(ctx context.Context, timeout time.Duration, fn func(context.Context) (any, error), expectResult bool)) *WorkerPool_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(func(context.Context) (any, error)), args[3].(bool))
	})
	return _c
}

func (_c *WorkerPool_Submit_Call) Return(_a0 chan *workerpool.Result) *WorkerPool_Submit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerPool_Submit_Call) RunAndReturn(run func(context.Context, time.Duration, func(context.Context) (any, error), bool) chan *workerpool.Result) *WorkerPool_Submit_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkerPool creates a new instance of WorkerPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkerPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkerPool {
	mock := &WorkerPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
