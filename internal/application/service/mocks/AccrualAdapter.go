// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dtroode/gophermart/internal/application/model"
	mock "github.com/stretchr/testify/mock"
)

// AccrualAdapter is an autogenerated mock type for the AccrualAdapter type
type AccrualAdapter struct {
	mock.Mock
}

type AccrualAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *AccrualAdapter) EXPECT() *AccrualAdapter_Expecter {
	return &AccrualAdapter_Expecter{mock: &_m.Mock}
}

// GetOrder provides a mock function with given fields: ctx, orderNumber
func (_m *AccrualAdapter) GetOrder(ctx context.Context, orderNumber string) (*model.AccrualOrder, error) {
	ret := _m.Called(ctx, orderNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *model.AccrualOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AccrualOrder, error)); ok {
		return rf(ctx, orderNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AccrualOrder); ok {
		r0 = rf(ctx, orderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccrualOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccrualAdapter_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type AccrualAdapter_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNumber string
func (_e *AccrualAdapter_Expecter) GetOrder(ctx interface{}, orderNumber interface{}) *AccrualAdapter_GetOrder_Call {
	return &AccrualAdapter_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderNumber)}
}

func (_c *AccrualAdapter_GetOrder_Call) Run(run func(ctx context.Context, orderNumber string)) *AccrualAdapter_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AccrualAdapter_GetOrder_Call) Return(_a0 *model.AccrualOrder, _a1 error) *AccrualAdapter_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccrualAdapter_GetOrder_Call) RunAndReturn(run func(context.Context, string) (*model.AccrualOrder, error)) *AccrualAdapter_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccrualAdapter creates a new instance of AccrualAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccrualAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccrualAdapter {
	mock := &AccrualAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
